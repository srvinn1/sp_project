from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QVBoxLayout, QGridLayout, QHBoxLayout, QSizePolicy, QMainWindow
from PyQt5.QtCore import QSize, Qt, QTimer, QTime, Qt
from PyQt5.QtGui import QPalette, QColor, QPainter, QBrush, QPen, QFont
import getpass
from cpu_section import TopCPUProcessesWidget
from memory_section import TopMemoryProcessesWidget
from network_section import TopNetworkProcessesWidget, NetworkMonitorWidget
from battery_section import BatteryGraphWidget
from kill_process_section import KillerApp
from toggle_switch import ThemeSwitch
from time_section import DigitalClock
from combined_plots import CombinedUsagePlotWidget
from cpu_section import CPUUsagePlotWidget

class RectanglePlaceholder(QWidget):
    """A QWidget subclass to mimic a rectangle placeholder."""
    def __init__(self, width, height, color='#FFFFFF'):
        super().__init__()
        self.setFixedSize(QSize(width, height))
        self.setAutoFillBackground(True)

        palette = self.palette()
        palette.setColor(QPalette.Window, QColor(color))
        self.setPalette(palette)


        # Initialize a layout to organize children inside the rectangle
        self.inner_layout = QVBoxLayout(self)
                 
        #self.inner_layout.setContentsMargins(10, 10, 10, 10)

        # Set size policy to allow resizing within the layout
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)




    # def paintEvent(self, event):
    #     painter = QPainter(self)
    #     painter.setRenderHint(QPainter.Antialiasing)

    #     # Define the pen and brush for the rectangle
    #     main_color = QColor('#000000')  # Purple color

    #     # Create pens with slightly offset colors to mimic shadow effect
    #     shadow_pen1 = QPen(QColor(main_color.red(), main_color.green(), main_color.blue(), 100))
    #     shadow_pen1.setWidth(5)

    #     shadow_pen2 = QPen(QColor(main_color.red(), main_color.green(), main_color.blue(), 75))
    #     shadow_pen2.setWidth(5)
    #     shadow_pen3 = QPen(QColor(main_color.red(), main_color.green(), main_color.blue(), 50))
    #     shadow_pen3.setWidth(5)
    #     shadow_pen4 = QPen(QColor(main_color.red(), main_color.green(), main_color.blue(), 25))
    #     shadow_pen4.setWidth(5)
    #     #brush = QBrush(QColor('#a9cce3'))  # Light purple color

    #     # Set the pen and brush
    #     painter.setPen(shadow_pen1)
    #     painter.setPen(shadow_pen2)
    #     painter.setPen(shadow_pen3)
    #     painter.setPen(shadow_pen4)
        #painter.setBrush(brush)

        # Draw the rectangle
        #painter.drawRoundedRect(self.rect(), 5, 5)

        # Draw the background color for the label
       # painter.fillRect(self.rect(), QColor('#FFB6C1'))  # Light blue color


class ComplexUILayout(QWidget):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Complex UI Layout with Rectangles")
        #self.setStyleSheet("color: purple;")
        self.setMinimumSize(1400, 800)

        self.width = 450
        self.height = 100

        self.light_theme()

        # Main layout to hold all sub-layouts
        main_layout = QGridLayout()
        main_layout.setSpacing(10)

        # Get the current PC user's username
        username = getpass.getuser()


        # First column of rectangles
        first_column = QVBoxLayout()
        first_column.setSpacing(10)

        # Create the rectangle placeholder
        self.welcome_rectangle = RectanglePlaceholder(self.width, 60 + self.height, '#562680')
        self.welcome_rectangle.setStyleSheet("background-color: #562680;"
                                        "border-radius: 10px;"
                                        "color: white")
        # Create a label with the welcome message
        welcome_label = QLabel(f"Welcome back, {username}!", self.welcome_rectangle)
        welcome_label.setAlignment(Qt.AlignCenter)
        welcome_label.setFont(QFont('Monaco', 25, QFont.Bold)) 
        welcome_label.setStyleSheet("font-family: 'Monaco';"
                "font-size: 25pt;" 
                "font-weight: bold;"
                "color: white;") 

        # Add the welcome label to the layout within the rectangle
        self.welcome_rectangle.inner_layout.addWidget(welcome_label)
        # Add other rectangles to the first column
        first_column.addWidget(self.welcome_rectangle)

        #Rectangle with CPU Usage
        cpu_rectangle = RectanglePlaceholder(self.width, 145 + self.height)
        cpu_label = QLabel("CPU Usage")
        cpu_table = TopCPUProcessesWidget()
        cpu_rectangle.inner_layout.addWidget(cpu_label)
        cpu_rectangle.inner_layout.addWidget(cpu_table)
        first_column.addWidget(cpu_rectangle)
        plot_rectangle = RectanglePlaceholder(self.width, 220 + self.height,'#FFFFFF')
        plot_label = QLabel("Usage Plots", plot_rectangle)
        plot_label.setStyleSheet("color: '#562680';")
        plot_label.setAlignment(Qt.AlignLeft)
        #plot_label.setMargin(5)
        plots = CombinedUsagePlotWidget()
        #memory_plot = MemoryUsagePlotWidget()
        #network_plot = NetworkUsagePlotWidget()
        # Add the plots to the layout within the rectangle
          # Add the plots to the layout within the rectangle
        plot_rectangle.inner_layout.addWidget(plot_label)
       # plot_rectangle.inner_layout.addWidget(QLabel("CPU Usage", plot_rectangle, alignment=Qt.AlignCenter))
        plot_rectangle.inner_layout.addWidget(plots)
        #plot_rectangle.inner_layout.addWidget(QLabel("Memory Usage", plot_rectangle, alignment=Qt.AlignCenter))
        #plot_rectangle.inner_layout.addWidget(memory_plot)
        #plot_rectangle.inner_layout.addWidget(QLabel("Network Usage", plot_rectangle, alignment=Qt.AlignCenter))
        #plot_rectangle.inner_layout.addWidget(network_plot)

        # Add the plot rectangle to the first column
        first_column.addWidget(plot_rectangle)

        # Second column of rectangles
        second_column = QVBoxLayout()
        second_column.setSpacing(10)
        right_stack_hbox = QHBoxLayout()
        right_stack_hbox.setSpacing(10)

        self.theme_switch = ThemeSwitch()

        right_stack_hbox.addWidget(self.theme_switch, 0, Qt.AlignCenter)
        self.theme_switch.toggle_button.clicked.connect(self.switch_theme)
        clock_rectangle = RectanglePlaceholder(220, 60 + self.height)
        clock_widget = DigitalClock()
        clock_rectangle.inner_layout.addWidget(clock_widget)   
        right_stack_hbox.addWidget(clock_widget)
        second_column.addLayout(right_stack_hbox)

        memory_rectangle = RectanglePlaceholder(self.width, 145 + self.height)
        memory_label = QLabel("Memory Usage", memory_rectangle)
        memory_table = TopMemoryProcessesWidget()
        memory_rectangle.inner_layout.addWidget(memory_label)
        memory_rectangle.inner_layout.addWidget(memory_table)
        second_column.addWidget(memory_rectangle)

        network_rectangle = RectanglePlaceholder(self.width, 235 + self.height)
        network_usage_label = QLabel("Network Usage", network_rectangle)
        #network_usage_label.setStyleSheet("color: purple;")
        network_process_table = TopNetworkProcessesWidget()
        network_usage_table = NetworkMonitorWidget()
        network_rectangle.inner_layout.addWidget(network_usage_label)
        network_rectangle.inner_layout.addWidget(network_process_table)
        network_rectangle.inner_layout.addWidget(network_usage_table)
        second_column.addWidget(network_rectangle)

        # Third column of rectangles
        third_column = QVBoxLayout()
        third_column.setSpacing(10)
        battery_rectangle = RectanglePlaceholder(self.width, 145 + self.height)
        battery_label = QLabel("Battery Usage", battery_rectangle)
        #battery_label.setStyleSheet("color: purple;")
        battery_graph = BatteryGraphWidget(self.width,115+self.height)
        battery_rectangle.inner_layout.addWidget(battery_label)
        battery_rectangle.inner_layout.addWidget(battery_graph)
        third_column.addWidget(battery_rectangle)
        cpu_graph = RectanglePlaceholder(self.width, 145 + self.height,'#FFFFFF')
        plot_label = QLabel("CPU Usage", cpu_graph)
        #plot_label.setStyleSheet("color: '#562680';")
        #plot_label.setAlignment(Qt.AlignLeft)
        cpu_plot = CPUUsagePlotWidget(self.width,115+self.height)
        # Add the plots to the layout within the rectangle
        cpu_graph.inner_layout.addWidget(plot_label)
        #cpu_graph.inner_layout.addWidget(QLabel("CPU Usage", cpu_graph, alignment=Qt.AlignCenter))
        cpu_graph.inner_layout.addWidget(cpu_plot)
        # Add the plot rectangle to the third column
        third_column.addWidget(cpu_graph)
        kill_process_rectangle = RectanglePlaceholder(self.width, 145 + self.height)
        kill_process_label = QLabel("Enter the process you want to kill", kill_process_rectangle)
        #kill_process_label.setStyleSheet("color: purple;")
        kill_process = KillerApp()
        kill_process_rectangle.inner_layout.addWidget(kill_process_label)
        kill_process_rectangle.inner_layout.addWidget(kill_process)
        third_column.addWidget(kill_process_rectangle)
        #plot_label.setMargin(5)

        # Add all columns to the grid layout
        main_layout.addLayout(first_column, 0, 0)
        main_layout.addLayout(second_column, 0, 1)
        main_layout.addLayout(third_column, 0, 2)

        # Set the main layout for the window
        self.setLayout(main_layout)


    def switch_theme(self):
        self.theme_switch.toggle_theme()
        # Toggle the theme based on the internal state of the theme switcher
        if self.theme_switch.checked:  # Assuming 'checked' is a boolean attribute of ThemeSwitch
            self.dark_theme()
            self.welcome_rectangle.setStyleSheet("background-color: #2E2E2E;"
                                        "border-radius: 10px;"
                                        "color: white")
        else:
            self.light_theme()
            self.welcome_rectangle.setStyleSheet("background-color: #562680;"
                                        "border-radius: 10px;"
                                        "color: white")
            


    def dark_theme(self):
        self.setStyleSheet("""
            QWidget{
                background-color: #3E3E3E;           
            }                  
            QPushButton {
                background-color: #555555;
                color: white;
            }
            QTableWidget {
                background-color: transparent;
                border: none;
                color: #FFFFFF;
                font-size: 13px;
            }
            QHeaderView::section {
                background-color: rgba(255, 255, 255, 0.3);
                text-align: left;
                font-size: 13px;
                color: #E7D5F6;  
                font-weight: 500;
            }
            QTableWidget QHeaderView {
                background-color: rgba(255, 255, 255, 0.3);
                font-size: 13px;
                color: #E7D5F6;  
                border: none;
                font-weight: 500;
                text-transform: uppercase;
            }
            QTableWidget QTableWidgetItem {
                padding: 3px;
                color: #fff;
            }
            QTableWidget::item:selected {
                background: rgba(255, 255, 255, 0.5);
            }
            QLabel {
                font-family: 'Monaco'; 
                font-size: 14pt; 
                font-weight: bold;
                color: #E7D5F6;
            }

        """)


    def light_theme(self):
        self.setStyleSheet("""
            QVBoxLayout {
                background-color: blue;
            } 
            QPushButton {
                background-color: #562680;
                color: white;
                border-radius: 14px;
            }
            QLabel {
                color: black;
            }
            QTableWidget {
                background-color: transparent;
                border: none;
                color: #000000;
                font-size: 13px;
            }
            QHeaderView::section {
                background-color: rgba(255, 255, 255, 0.3);
                text-align: left;
                font-size: 13px;
                color: #562680;  
                font-weight: 500;
            }
            QTableWidget QHeaderView {
                background-color: rgba(255, 255, 255, 0.3);
                font-size: 13px;
                color: #562680;  
                border: none;
                font-weight: 500;
                text-transform: uppercase;
            }
            QTableWidget QTableWidgetItem {
                padding: 3px;
                color: #fff;
            }
            QTableWidget::item:selected {
                background: rgba(255, 255, 255, 0.5);
            }
            QLabel {
                font-family: 'Monaco'; 
                font-size: 14pt; 
                font-weight: bold;
                color: #562680;
            }
            """)


if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    window = ComplexUILayout()
    window.show()
    sys.exit(app.exec_())


   


       kill_process_rectangle = RectanglePlaceholder(self.width, 150)
        kill_process_label = QLabel("Enter the process you want to kill", kill_process_rectangle)
        kill_process_label.setStyleSheet("color: purple;")
        kill_process = KillerApp()
        kill_process_rectangle.inner_layout.addWidget(kill_process_label)
        kill_process_rectangle.inner_layout.addWidget(kill_process)
        third_column.addWidget(kill_process_rectangle)
